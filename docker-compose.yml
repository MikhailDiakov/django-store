version: "3.8"
x-environment-defaults: &environment-defaults
  DEBUG: "True"
  DB_NAME: "${DB_NAME}"
  DB_USER: "${DB_USER}"
  DB_PASSWORD: "${DB_PASSWORD}"
  DB_HOST: "${DB_HOST}"
  DB_PORT: 5432
  CELERY_BROKER_URL: "redis://redis:6379/0"
  CELERY_RESULT_BACKEND: "redis://redis:6379/0"
  SECRET_KEY: "${SECRET_KEY}"
  STRIPE_PUBLISHABLE_KEY: "${STRIPE_PUBLISHABLE_KEY}"
  STRIPE_SECRET_KEY: "${STRIPE_SECRET_KEY}"
  STRIPE_WEBHOOK_SECRET: "${STRIPE_WEBHOOK_SECRET}"
  STRIPE_API_VERSION: "${STRIPE_API_VERSION}"
  AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  AWS_STORAGE_BUCKET_NAME: "${AWS_STORAGE_BUCKET_NAME}"
  AWS_S3_REGION_NAME: "${AWS_S3_REGION_NAME}"
  EMAIL_HOST: "${EMAIL_HOST}"
  EMAIL_PORT: "${EMAIL_PORT}"
  EMAIL_USE_TLS: "${EMAIL_USE_TLS}"
  EMAIL_HOST_USER: "${EMAIL_HOST_USER}"
  EMAIL_HOST_PASSWORD: "${EMAIL_HOST_PASSWORD}"

services:
  # Django application
  heavyaura:
    build:
      context: ./heavyaura
    volumes:
      - ./heavyaura:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    networks:
      - heavyaura-network
    depends_on:
      - postgres-db
      - kafka
    environment:
      <<: *environment-defaults
    restart: on-failure:5
    healthcheck:
      test: curl -f http://localhost:8000 || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis for Celery and caching
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - heavyaura-network

  # PostgreSQL database
  postgres-db:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - heavyaura-network

  # Celery worker
  celery:
    build:
      context: ./heavyaura
    command: celery -A heavyaura worker --loglevel=info
    volumes:
      - ./heavyaura:/app
    depends_on:
      - redis
      - postgres-db
    networks:
      - heavyaura-network
    environment:
      <<: *environment-defaults

  # Celery Beat (for periodic tasks)
  celery-beat:
    build:
      context: ./heavyaura
    command: celery -A heavyaura beat --loglevel=info
    volumes:
      - ./heavyaura:/app
    depends_on:
      - celery
      - redis
      - postgres-db
    networks:
      - heavyaura-network
    environment:
      <<: *environment-defaults

  # Nginx to reverse proxy requests to Django app
  nginx:
    build:
      context: .
      dockerfile: conf/Dockerfile
    volumes:
      - static_volume:/app/staticfiles
    ports:
      - "80:80"
      - "443:443"
    networks:
      - heavyaura-network
    depends_on:
      - heavyaura

  stripe-listener:
    image: stripe/stripe-cli
    command: >
      listen --forward-to heavyaura:8000/payment/webhook/
    environment:
      - STRIPE_API_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_DEVICE_NAME=stripe-listener
    networks:
      - heavyaura-network
    depends_on:
      - heavyaura

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - heavyaura-network

  # Kafka брокер
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - heavyaura-network

  # Cassandra
  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=log-cluster
      - CASSANDRA_NUM_TOKENS=256
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - heavyaura-network

  # Logs microservice
  logs-service:
    build:
      context: ./logs-service
    depends_on:
      - kafka
      - zookeeper
      - cassandra
    environment:
      KAFKA_BROKER: "kafka:9092"
      CASSANDRA_HOST: "cassandra"
    restart: on-failure:5
    networks:
      - heavyaura-network

volumes:
  pg_data:
  static_volume:
  cassandra_data:

networks:
  heavyaura-network:
    driver: bridge
